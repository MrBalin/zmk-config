/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUMBERS   1
#define ARROWS   2

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                                // -----------------------------------------------------------------------------------------
                                // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
                                // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
                                // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
                                //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

                                bindings = <
                                &none &kp Q &kp W &kp E &kp R &kp T                             &kp Y &kp U &kp I &kp O &kp P &none
                                &none &kp A &kp S &kp D &kp F &kp G                             &kp H &kp J &kp K &kp L &kp SEMI &none
                                &none &mt LCTRL Z &mt LGUI X &mt LALT C &kp V &kp B             &kp N &kp M &mt LALT COMMA &mt LGUI DOT &mt LCTRL FSLH &none
                                //
                                &kp SHFT &kp SPACE &lt NUMBERS BKSP                             &lt ARROWS TAB &kp RET &kp SHFT
                                >;
                };


                lower_layer {
                                // -----------------------------------------------------------------------------------------
                                // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
                                // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
                                // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
                                //                    | GUI |     | SPC |   | ENT |     | ALT |

                                bindings = <
                                &none &kp ESC &kp LBKT &kp RBKT &kp EQUAL &none                 &kp KP_DIVIDE &kp N7 &kp N8 &kp N9 &kp MINUS &none
                                &none &kp SHFT &mt LGUI SQT &kp BSLH &kp DEL &none              &kp KP_MULTIPLY &kp N4 &kp N5 &kp N6 &PLUS &none
                                &none &kp SHFT &none &none &none &none                          &kp N0 &kp N1 &kp N2 &kp N3 &kp DOT &none
                                //
                                &none &none &trans                                              &trans &none &none
                                >;
                };


                raise_layer {
                                // -----------------------------------------------------------------------------------------
                                // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
                                // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
                                // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
                                //                    | GUI |     | SPC |   | ENT |     | ALT |

                                bindings = <
                                &bt BT_CLR &none &none &kp UP &none &kp F2                      &none &kp LC(PG_UP) &kp LC(PG_DN) &none &none &none
                                &none &none &kp LEFT &kp DOWN &kp RIGHT &none                   &kp LG(TAB) &kp LC(LGUI) &kp LS(LGUI) &kp SHFT &kp CTRL &none
                                &none &none &none &none &kp HOME &kp END                        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
                                //
                                &none &none &trans                                              &trans &none &none
                                >;
                };
        };
};
