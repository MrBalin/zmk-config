/*
 * Baelin
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
                           &none &kp Q &kp W &kp E &kp R &kp T                          &kp Y &kp U &kp I &kp O &kp P &none
                           &none &kp A &kp S &kp D &kp F &kp G                          &kp H &kp J &kp K &kp L &kp SEMI &none
                           &none &mt LCTRL Z &mt LGUI X &mt LALT C &kp V &kp B          &kp N &kp M &mt LALT COMMA &mt LGUI DOT &mt LCTRL FSLH &none
                           &kp LSHFT &kp SPACE &lt 1 BKSP                               &lt 2 TAB &kp RET &kp LSHFT
                        >;
                };
                
                lower_layer {
                        bindings = <
                           &none &kp ESC &kp LBKT &kp RBKT &kp EQUAL &none                      &kp KP_DIVIDE &kp N7 &kp N8 &kp N9 &kp MINUS &none
                           &none &kp LSHFT &mt LGUI SQT &kp BSLH &kp DEL &none                  &kp KP_MULTIPLY &kp N4 &kp N5 &kp N6 &kp PLUS &none
                           &none &kp LSHFT &none &none &none &none                              &kp N0 &kp N1 &kp N2 &kp N3 &kp DOT &none
                           &none &none &trans                                                   &trans &none &none
                        >;
                };

                raise_layer {
                        bindings = <
                           &none &none &none &kp UP &none &kp F2                           &none &kp LC(PG_UP) &kp LC(PG_DN) &none &bt BT_CLR &none
                           &none &none &kp LEFT &kp DOWN &kp RIGHT &none                   &kp LG(TAB) &kp LC(LGUI) &kp LS(LGUI) &kp LSHFT &kp LCTRL &none
                           &none &none &none &none &kp HOME &kp END                        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
                           &none &none &trans                                              &trans &none &none
                        >;
                };
        };
};
